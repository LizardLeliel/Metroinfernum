
== Objects
> members
- aliases
aliases.add()
aliases.remove()
- location
- home
- destination (exits)
- nicks
- player (online or offline)
- sessions
- has_player (checking if an online player is currenly connected)
- contents (a list of all objects inside it)
- exits (exits it has)

- cmdset (all command sets defined on the object)
- scripts (manages scripts)

> methods
- msg()
- msg_contents() (sends message to all contents)
- search() (search for thing on object)
- execute_cmd() 
- move_to
- clear_exits()
- clear_contents() (moves all contents to home)
- delete() 

== script handler
- add()
- all() (gets all scripts stored in this handler)
- delete(self, key=none)
- get(self, key)
- start(self, key) (force starts the keys)
- validate(self, init_mode=False, "reset", "reload")

(room.cmdset.add("blah'))

== EvMenu
- from evennia.utils.evmenu import EvMenu

- EvMenu Creation
"
EvMenu(caller, menu_data,
       startnode="start",
       cmdset_mergetype="Replace", cmdset_priority=1,
       auto_quit=True, auto_look=True, auto_help=True,
       cmd_on_exit="look",
       nodetext_formatter=dedent_strip_nodetext_formatter,
       options_formatter=evtable_options_formatter,
       node_formatter=underline_node_formatter,
       input_parser=evtable_parse_input,
       persistent=False,
       **kwargs)
"

- A node
"
    def node1(caller):
        # (this is the start node if called like above)
        # code
        return text, options
"
+

- Text and Options
"
text (str, tuple or None): Text shown at this node. If a tuple, the
    second element in the tuple is a help text to display at this
    node when the user enters the menu help command there.
options (tuple, dict or None): (
    {'key': name,   # can also be a list of aliases. A special key is
                    # "_default", which marks this option as the default
                    # fallback when no other option matches the user input.
     'desc': description, # optional description
     'goto': nodekey,  # node to go to when chosen. This can also be a callable with
                       # caller and/or raw_string args. It must return a string
                       # with the key pointing to the node to go to.
     'exec': nodekey}, # node or callback to trigger as callback when chosen. This
                       # will execute *before* going to the next node. Both node
                       # and the explicit callback will be called as normal nodes
                       # (with caller and/or raw_string args). If the callable/node
                       # returns a single string (only), this will replace the current
                       # goto location string in-place (if a goto callback, it will never fire).
                       # Note that relying to much on letting exec assign the goto
                       # location can make it hard to debug your menu logic.
    {...}, ...)
"

- Hooking up a Menu
"
class CmdTestMenu(Command):
    """
    Test menu

    Usage:
      testmenu <menumodule>

    Starts a demo menu from a menu node definition module.

    """
    key = "testmenu"

    def func(self):

        if not self.args:
            self.caller.msg("Usage: testmenu menumodule")
            return
        # start menu
        EvMenu(self.caller, self.args.strip(), 
               startnode="test_start_node", 
               cmdset_mergetype="Replace")
"
































