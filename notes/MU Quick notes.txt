Monsters can mutate to grow themselves when they gain enough... stuff?

Make the pool overflowing

- Limbo is temporary starting point
- Exit is locked for non-completed characters (last)
- Make a room, it describes choosing between human and demon.

- Two exits, one leading to human and one to demon

-Demon:
- Abilities
- Profile & Description
- Check - This checks if profile and description meet standard length requirements,
  then turns their typeclass into a demon, blocks the exit back, opens entrance to overworld.
  It also takes their "ability object" and gives them their abilities.

-Human:
- Profile & Description
- Check - This checks if profile and description meet standard length requirements,
  then turns their typeclass into a human, and blocks the exit.
 


Have a narrow minded scope; worry about stuff like exclusive rooms later.

"
<Tehom> LizardLeliel: Okay, so locks are a text string stored in objects that allows you to set arbitrary permissions. The idea is that it's a semi-colon separated list of strings that map some word that specifies a type of access/permission, and a lock function that will return True or False when an accessing object checks it
<Tehom> For instance, you might set the lock 'view: perm(immortals)' on yourself. That sets the access check for 'view' to have the lock function of 'perm' with an argument of immortals, which means that unless the accessing object has a permission type of immortals, they will fail when checking if they can view you
<Tehom> You can define your own lock functions, in one of the /server subdirectories
<Tehom> For example, I did one called org() that checks for org membership, one called skill() that checks for a particular level of a skill, one for house ownership, and so on
"

"<Tehom> You can set 'permissions' in objects that are just a set of strings that mark them as having a permission by name. For example, you might have the permissions 'player, builder, wizard, immortal, strong, dark'. Then if you did self.check_permstring('builders'), that would return True
<Tehom> And something that had a view lockstring of 'view: perm(dark)' would work for you, since you have 'dark' in your permissions
<Tehom> There's default locks that are set in each object in their at_object_creation hook. same for players and other typed objects
<Tehom> You can view the access types that are defined, and the lock functions they use for those access types. Remember that access types are arbitrary strings. You could do @lock self=can_kill_the_hell_out_of_me: perm(immortals)
<Tehom> And then self.access(other_guy, 'can_kill_the_hell_out_of_me') would check that
"


"
LizardLeliel - Today at 4:18 PM
Ok, but what I'm wondering is, what else is there to "lock" besides just "view"?
By default
And are there any other functions besides perm?
D:BOT - Today at 4:18 PM
<Tehom> 'get', 'delete', 'edit' I think are a few"

https://github.com/evennia/evennia/blob/master/evennia/locks/lockfuncs.py

"
<Tehom> You have your own place for lock funcs that are added to those default
<Tehom> server/conf/lockfuncs
"

